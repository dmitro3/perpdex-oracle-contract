{
  "address": "0xf485d7478cCeA7ff7FDbE78957E73216CADBaC60",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "aggregatorArg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "aggregator",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3479ce09737b1d19b0cf47bd96951fc4e57d668b35bbec1a5a172c3146b41446",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0xf485d7478cCeA7ff7FDbE78957E73216CADBaC60",
    "transactionIndex": 0,
    "gasUsed": "337394",
    "logsBloom": "0x
    "blockHash": "0x5acd1ec6bc8e7130e8cac1c59ffced27a0c6aad2e816baa16e8e221153ff9e09",
    "transactionHash": "0x3479ce09737b1d19b0cf47bd96951fc4e57d668b35bbec1a5a172c3146b41446",
    "logs": [],
    "blockNumber": 5299968,
    "cumulativeGasUsed": "337394",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x7f8847242a530E809E17bF2DA5D2f9d2c4A43261"],
  "numDeployments": 1,
  "solcInputHash": "631dd256ffee1a5f5986843192f9d89c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"aggregatorArg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPrice()\":{\"details\":\"Returns the index price of the token.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ChainlinkPriceFeed.sol\":\"ChainlinkPriceFeed\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/ChainlinkPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport { IPerpdexPriceFeed } from \\\"./interface/IPerpdexPriceFeed.sol\\\";\\n\\ncontract ChainlinkPriceFeed is IPerpdexPriceFeed {\\n    using Address for address;\\n\\n    AggregatorV3Interface public immutable aggregator;\\n\\n    constructor(AggregatorV3Interface aggregatorArg) {\\n        require(address(aggregatorArg).isContract(), \\\"CPF_C: agg address not contract\\\");\\n\\n        aggregator = aggregatorArg;\\n    }\\n\\n    function decimals() external view override returns (uint8) {\\n        return aggregator.decimals();\\n    }\\n\\n    function getPrice() external view override returns (uint256) {\\n        (, uint256 latestPrice, ) = _getLatestRoundData();\\n        return latestPrice;\\n    }\\n\\n    function _getLatestRoundData()\\n        private\\n        view\\n        returns (\\n            uint80,\\n            uint256 finalPrice,\\n            uint256\\n        )\\n    {\\n        (uint80 round, int256 latestPrice, , uint256 latestTimestamp, ) = aggregator.latestRoundData();\\n        finalPrice = uint256(latestPrice);\\n        if (latestPrice < 0) {\\n            _requireEnoughHistory(round);\\n            (round, finalPrice, latestTimestamp) = _getRoundData(round - 1);\\n        }\\n        return (round, finalPrice, latestTimestamp);\\n    }\\n\\n    function _getRoundData(uint80 _round)\\n        private\\n        view\\n        returns (\\n            uint80,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (uint80 round, int256 latestPrice, , uint256 latestTimestamp, ) = aggregator.getRoundData(_round);\\n        while (latestPrice < 0) {\\n            _requireEnoughHistory(round);\\n            round = round - 1;\\n            (, latestPrice, , latestTimestamp, ) = aggregator.getRoundData(round);\\n        }\\n        return (round, uint256(latestPrice), latestTimestamp);\\n    }\\n\\n    function _requireEnoughHistory(uint80 _round) private pure {\\n        require(_round > 0, \\\"CPF_REH: no enough history\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9aafe66a6d3e46e28c7de5d75655b4ec688a1a6f3599a55a994e44ea1330b2fb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IPerpdexPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\ninterface IPerpdexPriceFeed {\\n    function decimals() external view returns (uint8);\\n\\n    /// @dev Returns the index price of the token.\\n    function getPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x250f4b4f299e0257a3d99af442048c2bb9a2c61774ddabff11a2bae3d9553c15\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161062b38038061062b83398101604081905261002f916100bb565b61004b816001600160a01b03166100ac60201b6101561760201c565b61009b5760405162461bcd60e51b815260206004820152601f60248201527f4350465f433a206167672061646472657373206e6f7420636f6e747261637400604482015260640160405180910390fd5b6001600160a01b03166080526100eb565b6001600160a01b03163b151590565b6000602082840312156100cd57600080fd5b81516001600160a01b03811681146100e457600080fd5b9392505050565b60805161050b61012060003960008181604b0152818160be01528181610170015281816102c8015261037a015261050b6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063245a7bfc14610046578063313ce5671461008a57806398d5fdca146100a4575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100926100ba565b60405160ff9091168152602001610081565b6100ac610143565b604051908152602001610081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013e9190610409565b905090565b60008061014e610165565b509392505050565b6001600160a01b03163b151590565b6000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156101cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f0919061044f565b509350509250925081945060008212156102295761020d83610235565b61022061021b60018561049f565b610295565b90965090935090505b91959394509092915050565b6000816001600160501b0316116102925760405162461bcd60e51b815260206004820152601a60248201527f4350465f5245483a206e6f20656e6f75676820686973746f7279000000000000604482015260640160405180910390fd5b50565b604051639a6fc8f560e01b81526001600160501b0382166004820152600090819081908190819081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639a6fc8f59060240160a060405180830381865afa15801561030f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610333919061044f565b50935050925092505b60008212156103fc5761034e83610235565b61035960018461049f565b604051639a6fc8f560e01b81526001600160501b03821660048201529093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639a6fc8f59060240160a060405180830381865afa1580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed919061044f565b5091945090925061033c915050565b9196909550909350915050565b60006020828403121561041b57600080fd5b815160ff8116811461042c57600080fd5b9392505050565b80516001600160501b038116811461044a57600080fd5b919050565b600080600080600060a0868803121561046757600080fd5b61047086610433565b945060208601519350604086015192506060860151915061049360808701610433565b90509295509295909350565b60006001600160501b03838116908316818110156104cd57634e487b7160e01b600052601160045260246000fd5b03939250505056fea26469706673582212201c69c32f0dce46f66e516b69b14af8cc19f3621ea0bc3c965c3652e64f1325aa64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063245a7bfc14610046578063313ce5671461008a57806398d5fdca146100a4575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100926100ba565b60405160ff9091168152602001610081565b6100ac610143565b604051908152602001610081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013e9190610409565b905090565b60008061014e610165565b509392505050565b6001600160a01b03163b151590565b6000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156101cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f0919061044f565b509350509250925081945060008212156102295761020d83610235565b61022061021b60018561049f565b610295565b90965090935090505b91959394509092915050565b6000816001600160501b0316116102925760405162461bcd60e51b815260206004820152601a60248201527f4350465f5245483a206e6f20656e6f75676820686973746f7279000000000000604482015260640160405180910390fd5b50565b604051639a6fc8f560e01b81526001600160501b0382166004820152600090819081908190819081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639a6fc8f59060240160a060405180830381865afa15801561030f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610333919061044f565b50935050925092505b60008212156103fc5761034e83610235565b61035960018461049f565b604051639a6fc8f560e01b81526001600160501b03821660048201529093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639a6fc8f59060240160a060405180830381865afa1580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed919061044f565b5091945090925061033c915050565b9196909550909350915050565b60006020828403121561041b57600080fd5b815160ff8116811461042c57600080fd5b9392505050565b80516001600160501b038116811461044a57600080fd5b919050565b600080600080600060a0868803121561046757600080fd5b61047086610433565b945060208601519350604086015192506060860151915061049360808701610433565b90509295509295909350565b60006001600160501b03838116908316818110156104cd57634e487b7160e01b600052601160045260246000fd5b03939250505056fea26469706673582212201c69c32f0dce46f66e516b69b14af8cc19f3621ea0bc3c965c3652e64f1325aa64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPrice()": {
        "details": "Returns the index price of the token."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
